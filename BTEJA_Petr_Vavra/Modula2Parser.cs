//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Modula2.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Modula2Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, IDENTIFIER=42, DIGIT=43, WS=44;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_varStatement = 2, RULE_assignment = 3, 
		RULE_ifStatement = 4, RULE_forStatement = 5, RULE_procedureDeclaration = 6, 
		RULE_procedureCall = 7, RULE_varFormal = 8, RULE_condition = 9, RULE_expression = 10, 
		RULE_term = 11, RULE_factor = 12, RULE_ident = 13, RULE_type = 14, RULE_array = 15, 
		RULE_realNumber = 16, RULE_number = 17, RULE_addOp = 18, RULE_multOp = 19, 
		RULE_character = 20, RULE_string = 21;
	public static readonly string[] ruleNames = {
		"program", "statement", "varStatement", "assignment", "ifStatement", "forStatement", 
		"procedureDeclaration", "procedureCall", "varFormal", "condition", "expression", 
		"term", "factor", "ident", "type", "array", "realNumber", "number", "addOp", 
		"multOp", "character", "string"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'VAR'", "':'", "':='", "'['", "']'", "'IF'", "'THEN'", "'ELSIF'", 
		"'ELSE'", "'END'", "'FOR'", "'TO'", "'BY'", "'DO'", "'PROCEDURE'", "'('", 
		"')'", "'BEGIN'", "'RETURN'", "'.'", "','", "'>='", "'<='", "'>'", "'<'", 
		"'='", "'#'", "'1'", "'0'", "'INTEGER'", "'REAL'", "'CHAR'", "'ARRAY'", 
		"'OF'", "'-'", "'+'", "'*'", "'/'", "'\"'", "'''"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "IDENTIFIER", "DIGIT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Modula2.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Modula2Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Modula2Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Modula2Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Modula2Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 44;
				statement();
				State = 45;
				Match(T__0);
				}
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 4398046580868L) != 0) );
			State = 51;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarStatementContext varStatement() {
			return GetRuleContext<VarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDeclarationContext procedureDeclaration() {
			return GetRuleContext<ProcedureDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureCallContext procedureCall() {
			return GetRuleContext<ProcedureCallContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 59;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 53;
				varStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 54;
				assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 55;
				ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 56;
				forStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 57;
				procedureDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 58;
				procedureCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureCallContext procedureCall() {
			return GetRuleContext<ProcedureCallContext>(0);
		}
		public VarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterVarStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitVarStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarStatementContext varStatement() {
		VarStatementContext _localctx = new VarStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_varStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			Match(T__1);
			State = 62;
			ident();
			State = 63;
			Match(T__2);
			State = 64;
			type();
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 65;
				Match(T__3);
				State = 68;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 66;
					expression();
					}
					break;
				case 2:
					{
					State = 67;
					procedureCall();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureCallContext procedureCall() {
			return GetRuleContext<ProcedureCallContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 6, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			ident();
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 73;
				Match(T__4);
				State = 74;
				expression();
				State = 75;
				Match(T__5);
				}
			}

			State = 79;
			Match(T__3);
			State = 82;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 80;
				expression();
				}
				break;
			case 2:
				{
				State = 81;
				procedureCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(T__6);
			State = 85;
			condition();
			State = 86;
			Match(T__7);
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 87;
				statement();
				State = 88;
				Match(T__0);
				}
				}
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 4398046580868L) != 0) );
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8) {
				{
				{
				State = 94;
				Match(T__8);
				State = 95;
				condition();
				State = 96;
				Match(T__7);
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 97;
					statement();
					State = 98;
					Match(T__0);
					}
					}
					State = 102;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 4398046580868L) != 0) );
				}
				}
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 109;
				Match(T__9);
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 110;
					statement();
					State = 111;
					Match(T__0);
					}
					}
					State = 115;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 4398046580868L) != 0) );
				}
			}

			State = 119;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			Match(T__11);
			State = 122;
			ident();
			State = 123;
			Match(T__3);
			State = 124;
			expression();
			State = 125;
			Match(T__12);
			State = 126;
			expression();
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 127;
				Match(T__13);
				State = 128;
				expression();
				}
			}

			State = 131;
			Match(T__14);
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 132;
				statement();
				State = 133;
				Match(T__0);
				}
				}
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 4398046580868L) != 0) );
			State = 139;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarFormalContext[] varFormal() {
			return GetRuleContexts<VarFormalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarFormalContext varFormal(int i) {
			return GetRuleContext<VarFormalContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ProcedureDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterProcedureDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitProcedureDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureDeclarationContext procedureDeclaration() {
		ProcedureDeclarationContext _localctx = new ProcedureDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_procedureDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			Match(T__15);
			State = 142;
			ident();
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 143;
				Match(T__16);
				State = 144;
				varFormal();
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 145;
					Match(T__0);
					State = 146;
					varFormal();
					}
					}
					State = 151;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 152;
				Match(T__17);
				}
			}

			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 156;
				Match(T__2);
				State = 157;
				type();
				}
			}

			State = 160;
			Match(T__0);
			State = 161;
			Match(T__18);
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 162;
				statement();
				State = 163;
				Match(T__0);
				}
				}
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 4398046580868L) != 0) );
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 169;
				Match(T__19);
				State = 170;
				expression();
				State = 171;
				Match(T__0);
				}
			}

			State = 175;
			Match(T__10);
			State = 176;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterProcedureCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitProcedureCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureCallContext procedureCall() {
		ProcedureCallContext _localctx = new ProcedureCallContext(Context, State);
		EnterRule(_localctx, 14, RULE_procedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 178;
					ident();
					State = 179;
					Match(T__20);
					}
					} 
				}
				State = 185;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			State = 186;
			ident();
			State = 187;
			Match(T__16);
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16700443590656L) != 0)) {
				{
				State = 188;
				expression();
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__21) {
					{
					{
					State = 189;
					Match(T__21);
					State = 190;
					expression();
					}
					}
					State = 195;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 198;
			Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarFormalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VarFormalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varFormal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterVarFormal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitVarFormal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarFormal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarFormalContext varFormal() {
		VarFormalContext _localctx = new VarFormalContext(Context, State);
		EnterRule(_localctx, 16, RULE_varFormal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			ident();
			State = 201;
			Match(T__2);
			State = 202;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 18, RULE_condition);
		int _la;
		try {
			State = 210;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 204;
				expression();
				State = 205;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 528482304L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 206;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 208;
				ident();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 209;
				_la = TokenStream.LA(1);
				if ( !(_la==T__28 || _la==T__29) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddOpContext[] addOp() {
			return GetRuleContexts<AddOpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddOpContext addOp(int i) {
			return GetRuleContext<AddOpContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			term();
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__35 || _la==T__36) {
				{
				{
				{
				State = 213;
				addOp();
				}
				State = 214;
				term();
				}
				}
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultOpContext[] multOp() {
			return GetRuleContexts<MultOpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultOpContext multOp(int i) {
			return GetRuleContext<MultOpContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 22, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			factor();
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__37 || _la==T__38) {
				{
				{
				{
				State = 222;
				multOp();
				}
				State = 223;
				factor();
				}
				}
				State = 229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureCallContext procedureCall() {
			return GetRuleContext<ProcedureCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RealNumberContext realNumber() {
			return GetRuleContext<RealNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 24, RULE_factor);
		int _la;
		try {
			State = 246;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 230;
				procedureCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 231;
				@string();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 232;
				character();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 233;
				realNumber();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 234;
				number();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 235;
				ident();
				State = 240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__4) {
					{
					State = 236;
					Match(T__4);
					State = 237;
					expression();
					State = 238;
					Match(T__5);
					}
				}

				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 242;
				Match(T__16);
				State = 243;
				expression();
				State = 244;
				Match(T__17);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(Modula2Parser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Modula2Parser.IDENTIFIER, i);
		}
		public IdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ident; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentContext ident() {
		IdentContext _localctx = new IdentContext(Context, State);
		EnterRule(_localctx, 26, RULE_ident);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 248;
				Match(IDENTIFIER);
				}
				}
				State = 251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 28, RULE_type);
		try {
			State = 257;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__30:
				EnterOuterAlt(_localctx, 1);
				{
				State = 253;
				Match(T__30);
				}
				break;
			case T__31:
				EnterOuterAlt(_localctx, 2);
				{
				State = 254;
				Match(T__31);
				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 3);
				{
				State = 255;
				Match(T__32);
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 4);
				{
				State = 256;
				array();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 30, RULE_array);
		try {
			State = 267;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 259;
				Match(T__33);
				State = 260;
				Match(T__34);
				State = 261;
				type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 262;
				Match(T__33);
				State = 263;
				expression();
				State = 264;
				Match(T__34);
				State = 265;
				type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		public RealNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterRealNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitRealNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealNumberContext realNumber() {
		RealNumberContext _localctx = new RealNumberContext(Context, State);
		EnterRule(_localctx, 32, RULE_realNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			number();
			State = 270;
			Match(T__20);
			State = 271;
			number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT() { return GetToken(Modula2Parser.DIGIT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 34, RULE_number);
		int _la;
		try {
			State = 279;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__28:
				EnterOuterAlt(_localctx, 1);
				{
				State = 273;
				Match(T__28);
				}
				break;
			case T__29:
				EnterOuterAlt(_localctx, 2);
				{
				State = 274;
				Match(T__29);
				}
				break;
			case T__35:
			case T__36:
			case DIGIT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__35 || _la==T__36) {
					{
					State = 275;
					_la = TokenStream.LA(1);
					if ( !(_la==T__35 || _la==T__36) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 278;
				Match(DIGIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOpContext : ParserRuleContext {
		public AddOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterAddOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitAddOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOpContext addOp() {
		AddOpContext _localctx = new AddOpContext(Context, State);
		EnterRule(_localctx, 36, RULE_addOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			_la = TokenStream.LA(1);
			if ( !(_la==T__35 || _la==T__36) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultOpContext : ParserRuleContext {
		public MultOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterMultOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitMultOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOpContext multOp() {
		MultOpContext _localctx = new MultOpContext(Context, State);
		EnterRule(_localctx, 38, RULE_multOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			_la = TokenStream.LA(1);
			if ( !(_la==T__37 || _la==T__38) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterContext : ParserRuleContext {
		public CharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterCharacter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitCharacter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterContext character() {
		CharacterContext _localctx = new CharacterContext(Context, State);
		EnterRule(_localctx, 40, RULE_character);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(T__39);
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 34084860461054L) != 0)) {
				{
				{
				State = 286;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==T__39) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 292;
			Match(T__39);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 42, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			Match(T__40);
			State = 298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32985348833278L) != 0)) {
				{
				{
				State = 295;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==T__40) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 301;
			Match(T__40);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,44,304,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		1,0,1,0,1,0,4,0,48,8,0,11,0,12,0,49,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,3,
		1,60,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,69,8,2,3,2,71,8,2,1,3,1,3,1,3,
		1,3,1,3,3,3,78,8,3,1,3,1,3,1,3,3,3,83,8,3,1,4,1,4,1,4,1,4,1,4,1,4,4,4,
		91,8,4,11,4,12,4,92,1,4,1,4,1,4,1,4,1,4,1,4,4,4,101,8,4,11,4,12,4,102,
		5,4,105,8,4,10,4,12,4,108,9,4,1,4,1,4,1,4,1,4,4,4,114,8,4,11,4,12,4,115,
		3,4,118,8,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,130,8,5,1,5,1,
		5,1,5,1,5,4,5,136,8,5,11,5,12,5,137,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,5,
		6,148,8,6,10,6,12,6,151,9,6,1,6,1,6,3,6,155,8,6,1,6,1,6,3,6,159,8,6,1,
		6,1,6,1,6,1,6,1,6,4,6,166,8,6,11,6,12,6,167,1,6,1,6,1,6,1,6,3,6,174,8,
		6,1,6,1,6,1,6,1,7,1,7,1,7,5,7,182,8,7,10,7,12,7,185,9,7,1,7,1,7,1,7,1,
		7,1,7,5,7,192,8,7,10,7,12,7,195,9,7,3,7,197,8,7,1,7,1,7,1,8,1,8,1,8,1,
		8,1,9,1,9,1,9,1,9,1,9,1,9,3,9,211,8,9,1,10,1,10,1,10,1,10,5,10,217,8,10,
		10,10,12,10,220,9,10,1,11,1,11,1,11,1,11,5,11,226,8,11,10,11,12,11,229,
		9,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,241,8,12,1,
		12,1,12,1,12,1,12,3,12,247,8,12,1,13,4,13,250,8,13,11,13,12,13,251,1,14,
		1,14,1,14,1,14,3,14,258,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,
		15,268,8,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,3,17,277,8,17,1,17,3,17,
		280,8,17,1,18,1,18,1,19,1,19,1,20,1,20,5,20,288,8,20,10,20,12,20,291,9,
		20,1,20,1,20,1,21,1,21,5,21,297,8,21,10,21,12,21,300,9,21,1,21,1,21,1,
		21,0,0,22,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
		0,6,1,0,23,28,1,0,29,30,1,0,36,37,1,0,38,39,1,0,40,40,1,0,41,41,327,0,
		47,1,0,0,0,2,59,1,0,0,0,4,61,1,0,0,0,6,72,1,0,0,0,8,84,1,0,0,0,10,121,
		1,0,0,0,12,141,1,0,0,0,14,183,1,0,0,0,16,200,1,0,0,0,18,210,1,0,0,0,20,
		212,1,0,0,0,22,221,1,0,0,0,24,246,1,0,0,0,26,249,1,0,0,0,28,257,1,0,0,
		0,30,267,1,0,0,0,32,269,1,0,0,0,34,279,1,0,0,0,36,281,1,0,0,0,38,283,1,
		0,0,0,40,285,1,0,0,0,42,294,1,0,0,0,44,45,3,2,1,0,45,46,5,1,0,0,46,48,
		1,0,0,0,47,44,1,0,0,0,48,49,1,0,0,0,49,47,1,0,0,0,49,50,1,0,0,0,50,51,
		1,0,0,0,51,52,5,0,0,1,52,1,1,0,0,0,53,60,3,4,2,0,54,60,3,6,3,0,55,60,3,
		8,4,0,56,60,3,10,5,0,57,60,3,12,6,0,58,60,3,14,7,0,59,53,1,0,0,0,59,54,
		1,0,0,0,59,55,1,0,0,0,59,56,1,0,0,0,59,57,1,0,0,0,59,58,1,0,0,0,60,3,1,
		0,0,0,61,62,5,2,0,0,62,63,3,26,13,0,63,64,5,3,0,0,64,70,3,28,14,0,65,68,
		5,4,0,0,66,69,3,20,10,0,67,69,3,14,7,0,68,66,1,0,0,0,68,67,1,0,0,0,69,
		71,1,0,0,0,70,65,1,0,0,0,70,71,1,0,0,0,71,5,1,0,0,0,72,77,3,26,13,0,73,
		74,5,5,0,0,74,75,3,20,10,0,75,76,5,6,0,0,76,78,1,0,0,0,77,73,1,0,0,0,77,
		78,1,0,0,0,78,79,1,0,0,0,79,82,5,4,0,0,80,83,3,20,10,0,81,83,3,14,7,0,
		82,80,1,0,0,0,82,81,1,0,0,0,83,7,1,0,0,0,84,85,5,7,0,0,85,86,3,18,9,0,
		86,90,5,8,0,0,87,88,3,2,1,0,88,89,5,1,0,0,89,91,1,0,0,0,90,87,1,0,0,0,
		91,92,1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,106,1,0,0,0,94,95,5,9,0,0,
		95,96,3,18,9,0,96,100,5,8,0,0,97,98,3,2,1,0,98,99,5,1,0,0,99,101,1,0,0,
		0,100,97,1,0,0,0,101,102,1,0,0,0,102,100,1,0,0,0,102,103,1,0,0,0,103,105,
		1,0,0,0,104,94,1,0,0,0,105,108,1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,
		107,117,1,0,0,0,108,106,1,0,0,0,109,113,5,10,0,0,110,111,3,2,1,0,111,112,
		5,1,0,0,112,114,1,0,0,0,113,110,1,0,0,0,114,115,1,0,0,0,115,113,1,0,0,
		0,115,116,1,0,0,0,116,118,1,0,0,0,117,109,1,0,0,0,117,118,1,0,0,0,118,
		119,1,0,0,0,119,120,5,11,0,0,120,9,1,0,0,0,121,122,5,12,0,0,122,123,3,
		26,13,0,123,124,5,4,0,0,124,125,3,20,10,0,125,126,5,13,0,0,126,129,3,20,
		10,0,127,128,5,14,0,0,128,130,3,20,10,0,129,127,1,0,0,0,129,130,1,0,0,
		0,130,131,1,0,0,0,131,135,5,15,0,0,132,133,3,2,1,0,133,134,5,1,0,0,134,
		136,1,0,0,0,135,132,1,0,0,0,136,137,1,0,0,0,137,135,1,0,0,0,137,138,1,
		0,0,0,138,139,1,0,0,0,139,140,5,11,0,0,140,11,1,0,0,0,141,142,5,16,0,0,
		142,154,3,26,13,0,143,144,5,17,0,0,144,149,3,16,8,0,145,146,5,1,0,0,146,
		148,3,16,8,0,147,145,1,0,0,0,148,151,1,0,0,0,149,147,1,0,0,0,149,150,1,
		0,0,0,150,152,1,0,0,0,151,149,1,0,0,0,152,153,5,18,0,0,153,155,1,0,0,0,
		154,143,1,0,0,0,154,155,1,0,0,0,155,158,1,0,0,0,156,157,5,3,0,0,157,159,
		3,28,14,0,158,156,1,0,0,0,158,159,1,0,0,0,159,160,1,0,0,0,160,161,5,1,
		0,0,161,165,5,19,0,0,162,163,3,2,1,0,163,164,5,1,0,0,164,166,1,0,0,0,165,
		162,1,0,0,0,166,167,1,0,0,0,167,165,1,0,0,0,167,168,1,0,0,0,168,173,1,
		0,0,0,169,170,5,20,0,0,170,171,3,20,10,0,171,172,5,1,0,0,172,174,1,0,0,
		0,173,169,1,0,0,0,173,174,1,0,0,0,174,175,1,0,0,0,175,176,5,11,0,0,176,
		177,3,26,13,0,177,13,1,0,0,0,178,179,3,26,13,0,179,180,5,21,0,0,180,182,
		1,0,0,0,181,178,1,0,0,0,182,185,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,
		0,184,186,1,0,0,0,185,183,1,0,0,0,186,187,3,26,13,0,187,196,5,17,0,0,188,
		193,3,20,10,0,189,190,5,22,0,0,190,192,3,20,10,0,191,189,1,0,0,0,192,195,
		1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,197,1,0,0,0,195,193,1,0,0,
		0,196,188,1,0,0,0,196,197,1,0,0,0,197,198,1,0,0,0,198,199,5,18,0,0,199,
		15,1,0,0,0,200,201,3,26,13,0,201,202,5,3,0,0,202,203,3,28,14,0,203,17,
		1,0,0,0,204,205,3,20,10,0,205,206,7,0,0,0,206,207,3,20,10,0,207,211,1,
		0,0,0,208,211,3,26,13,0,209,211,7,1,0,0,210,204,1,0,0,0,210,208,1,0,0,
		0,210,209,1,0,0,0,211,19,1,0,0,0,212,218,3,22,11,0,213,214,3,36,18,0,214,
		215,3,22,11,0,215,217,1,0,0,0,216,213,1,0,0,0,217,220,1,0,0,0,218,216,
		1,0,0,0,218,219,1,0,0,0,219,21,1,0,0,0,220,218,1,0,0,0,221,227,3,24,12,
		0,222,223,3,38,19,0,223,224,3,24,12,0,224,226,1,0,0,0,225,222,1,0,0,0,
		226,229,1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,23,1,0,0,0,229,227,
		1,0,0,0,230,247,3,14,7,0,231,247,3,42,21,0,232,247,3,40,20,0,233,247,3,
		32,16,0,234,247,3,34,17,0,235,240,3,26,13,0,236,237,5,5,0,0,237,238,3,
		20,10,0,238,239,5,6,0,0,239,241,1,0,0,0,240,236,1,0,0,0,240,241,1,0,0,
		0,241,247,1,0,0,0,242,243,5,17,0,0,243,244,3,20,10,0,244,245,5,18,0,0,
		245,247,1,0,0,0,246,230,1,0,0,0,246,231,1,0,0,0,246,232,1,0,0,0,246,233,
		1,0,0,0,246,234,1,0,0,0,246,235,1,0,0,0,246,242,1,0,0,0,247,25,1,0,0,0,
		248,250,5,42,0,0,249,248,1,0,0,0,250,251,1,0,0,0,251,249,1,0,0,0,251,252,
		1,0,0,0,252,27,1,0,0,0,253,258,5,31,0,0,254,258,5,32,0,0,255,258,5,33,
		0,0,256,258,3,30,15,0,257,253,1,0,0,0,257,254,1,0,0,0,257,255,1,0,0,0,
		257,256,1,0,0,0,258,29,1,0,0,0,259,260,5,34,0,0,260,261,5,35,0,0,261,268,
		3,28,14,0,262,263,5,34,0,0,263,264,3,20,10,0,264,265,5,35,0,0,265,266,
		3,28,14,0,266,268,1,0,0,0,267,259,1,0,0,0,267,262,1,0,0,0,268,31,1,0,0,
		0,269,270,3,34,17,0,270,271,5,21,0,0,271,272,3,34,17,0,272,33,1,0,0,0,
		273,280,5,29,0,0,274,280,5,30,0,0,275,277,7,2,0,0,276,275,1,0,0,0,276,
		277,1,0,0,0,277,278,1,0,0,0,278,280,5,43,0,0,279,273,1,0,0,0,279,274,1,
		0,0,0,279,276,1,0,0,0,280,35,1,0,0,0,281,282,7,2,0,0,282,37,1,0,0,0,283,
		284,7,3,0,0,284,39,1,0,0,0,285,289,5,40,0,0,286,288,8,4,0,0,287,286,1,
		0,0,0,288,291,1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,0,290,292,1,0,0,0,
		291,289,1,0,0,0,292,293,5,40,0,0,293,41,1,0,0,0,294,298,5,41,0,0,295,297,
		8,5,0,0,296,295,1,0,0,0,297,300,1,0,0,0,298,296,1,0,0,0,298,299,1,0,0,
		0,299,301,1,0,0,0,300,298,1,0,0,0,301,302,5,41,0,0,302,43,1,0,0,0,33,49,
		59,68,70,77,82,92,102,106,115,117,129,137,149,154,158,167,173,183,193,
		196,210,218,227,240,246,251,257,267,276,279,289,298
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
