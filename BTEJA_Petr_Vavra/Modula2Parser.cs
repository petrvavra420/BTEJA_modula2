//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Modula2.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Modula2Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, IDENTIFIER=42, DIGIT=43, WS=44;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_varStatement = 2, RULE_assignment = 3, 
		RULE_ifStatement = 4, RULE_ifBlock = 5, RULE_elseIfBlock = 6, RULE_elseBlock = 7, 
		RULE_forStatement = 8, RULE_procedureDeclaration = 9, RULE_procedureCall = 10, 
		RULE_varFormal = 11, RULE_condition = 12, RULE_expression = 13, RULE_term = 14, 
		RULE_factor = 15, RULE_arrayAccess = 16, RULE_arrayIndexAccess = 17, RULE_ident = 18, 
		RULE_type = 19, RULE_array = 20, RULE_realNumber = 21, RULE_number = 22, 
		RULE_addOp = 23, RULE_multOp = 24, RULE_character = 25, RULE_string = 26;
	public static readonly string[] ruleNames = {
		"program", "statement", "varStatement", "assignment", "ifStatement", "ifBlock", 
		"elseIfBlock", "elseBlock", "forStatement", "procedureDeclaration", "procedureCall", 
		"varFormal", "condition", "expression", "term", "factor", "arrayAccess", 
		"arrayIndexAccess", "ident", "type", "array", "realNumber", "number", 
		"addOp", "multOp", "character", "string"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'VAR'", "':'", "':='", "'['", "']'", "'IF'", "'THEN'", "'ELSIF'", 
		"'ELSE'", "'END'", "'FOR'", "'TO'", "'BY'", "'DO'", "'PROCEDURE'", "'('", 
		"')'", "'BEGIN'", "'RETURN'", "'.'", "','", "'>='", "'<='", "'>'", "'<'", 
		"'='", "'#'", "'1'", "'0'", "'INTEGER'", "'REAL'", "'CHAR'", "'ARRAY'", 
		"'OF'", "'-'", "'+'", "'*'", "'/'", "'\"'", "'''"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "IDENTIFIER", "DIGIT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Modula2.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Modula2Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Modula2Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Modula2Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Modula2Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 54;
				statement();
				State = 55;
				Match(T__0);
				}
				}
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 4398046580868L) != 0) );
			State = 61;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarStatementContext varStatement() {
			return GetRuleContext<VarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDeclarationContext procedureDeclaration() {
			return GetRuleContext<ProcedureDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureCallContext procedureCall() {
			return GetRuleContext<ProcedureCallContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 69;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 63;
				varStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 64;
				assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 65;
				ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 66;
				forStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 67;
				procedureDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 68;
				procedureCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureCallContext procedureCall() {
			return GetRuleContext<ProcedureCallContext>(0);
		}
		public VarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterVarStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitVarStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarStatementContext varStatement() {
		VarStatementContext _localctx = new VarStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_varStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(T__1);
			State = 72;
			ident();
			State = 73;
			Match(T__2);
			State = 74;
			type();
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 75;
				Match(T__3);
				State = 78;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 76;
					expression();
					}
					break;
				case 2:
					{
					State = 77;
					procedureCall();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureCallContext procedureCall() {
			return GetRuleContext<ProcedureCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext[] arrayAccess() {
			return GetRuleContexts<ArrayAccessContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess(int i) {
			return GetRuleContext<ArrayAccessContext>(i);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 6, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			ident();
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 83;
				Match(T__4);
				State = 84;
				arrayAccess();
				State = 85;
				Match(T__5);
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 92;
			Match(T__3);
			State = 95;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 93;
				expression();
				}
				break;
			case 2:
				{
				State = 94;
				procedureCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfBlockContext[] elseIfBlock() {
			return GetRuleContexts<ElseIfBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfBlockContext elseIfBlock(int i) {
			return GetRuleContext<ElseIfBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			Match(T__6);
			State = 98;
			condition();
			State = 99;
			Match(T__7);
			State = 100;
			ifBlock();
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8) {
				{
				{
				State = 101;
				Match(T__8);
				State = 102;
				condition();
				State = 103;
				Match(T__7);
				State = 104;
				elseIfBlock();
				}
				}
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 111;
				Match(T__9);
				State = 112;
				elseBlock();
				}
			}

			State = 115;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_ifBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 117;
				statement();
				State = 118;
				Match(T__0);
				}
				}
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 4398046580868L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ElseIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterElseIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitElseIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfBlockContext elseIfBlock() {
		ElseIfBlockContext _localctx = new ElseIfBlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_elseIfBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 124;
				statement();
				State = 125;
				Match(T__0);
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 4398046580868L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterElseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitElseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(Context, State);
		EnterRule(_localctx, 14, RULE_elseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 131;
				statement();
				State = 132;
				Match(T__0);
				}
				}
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 4398046580868L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			Match(T__11);
			State = 139;
			ident();
			State = 140;
			Match(T__3);
			State = 141;
			expression();
			State = 142;
			Match(T__12);
			State = 143;
			expression();
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 144;
				Match(T__13);
				State = 145;
				expression();
				}
			}

			State = 148;
			Match(T__14);
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 149;
				statement();
				State = 150;
				Match(T__0);
				}
				}
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 4398046580868L) != 0) );
			State = 156;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarFormalContext[] varFormal() {
			return GetRuleContexts<VarFormalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarFormalContext varFormal(int i) {
			return GetRuleContext<VarFormalContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ProcedureDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterProcedureDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitProcedureDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureDeclarationContext procedureDeclaration() {
		ProcedureDeclarationContext _localctx = new ProcedureDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_procedureDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			Match(T__15);
			State = 159;
			ident();
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 160;
				Match(T__16);
				State = 161;
				varFormal();
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 162;
					Match(T__0);
					State = 163;
					varFormal();
					}
					}
					State = 168;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 169;
				Match(T__17);
				}
			}

			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 173;
				Match(T__2);
				State = 174;
				type();
				}
			}

			State = 177;
			Match(T__0);
			State = 178;
			Match(T__18);
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 179;
				statement();
				State = 180;
				Match(T__0);
				}
				}
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 4398046580868L) != 0) );
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 186;
				Match(T__19);
				State = 187;
				expression();
				State = 188;
				Match(T__0);
				}
			}

			State = 192;
			Match(T__10);
			State = 193;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterProcedureCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitProcedureCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureCallContext procedureCall() {
		ProcedureCallContext _localctx = new ProcedureCallContext(Context, State);
		EnterRule(_localctx, 20, RULE_procedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 195;
					ident();
					State = 196;
					Match(T__20);
					}
					} 
				}
				State = 202;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			State = 203;
			ident();
			State = 204;
			Match(T__16);
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16700443590656L) != 0)) {
				{
				State = 205;
				expression();
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__21) {
					{
					{
					State = 206;
					Match(T__21);
					State = 207;
					expression();
					}
					}
					State = 212;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 215;
			Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarFormalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VarFormalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varFormal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterVarFormal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitVarFormal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarFormal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarFormalContext varFormal() {
		VarFormalContext _localctx = new VarFormalContext(Context, State);
		EnterRule(_localctx, 22, RULE_varFormal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			ident();
			State = 218;
			Match(T__2);
			State = 219;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 24, RULE_condition);
		int _la;
		try {
			State = 227;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 221;
				expression();
				State = 222;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 528482304L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 223;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 225;
				ident();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 226;
				_la = TokenStream.LA(1);
				if ( !(_la==T__28 || _la==T__29) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddOpContext[] addOp() {
			return GetRuleContexts<AddOpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddOpContext addOp(int i) {
			return GetRuleContext<AddOpContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			term();
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__35 || _la==T__36) {
				{
				{
				{
				State = 230;
				addOp();
				}
				State = 231;
				term();
				}
				}
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultOpContext[] multOp() {
			return GetRuleContexts<MultOpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultOpContext multOp(int i) {
			return GetRuleContext<MultOpContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 28, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			factor();
			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__37 || _la==T__38) {
				{
				{
				{
				State = 239;
				multOp();
				}
				State = 240;
				factor();
				}
				}
				State = 246;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureCallContext procedureCall() {
			return GetRuleContext<ProcedureCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RealNumberContext realNumber() {
			return GetRuleContext<RealNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayIndexAccessContext arrayIndexAccess() {
			return GetRuleContext<ArrayIndexAccessContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 30, RULE_factor);
		try {
			State = 258;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 247;
				procedureCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 248;
				@string();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 249;
				character();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 250;
				realNumber();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 251;
				number();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 252;
				ident();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 253;
				Match(T__16);
				State = 254;
				expression();
				State = 255;
				Match(T__17);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 257;
				arrayIndexAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterArrayAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitArrayAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(Context, State);
		EnterRule(_localctx, 32, RULE_arrayAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayIndexAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext[] arrayAccess() {
			return GetRuleContexts<ArrayAccessContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess(int i) {
			return GetRuleContext<ArrayAccessContext>(i);
		}
		public ArrayIndexAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayIndexAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterArrayIndexAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitArrayIndexAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayIndexAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayIndexAccessContext arrayIndexAccess() {
		ArrayIndexAccessContext _localctx = new ArrayIndexAccessContext(Context, State);
		EnterRule(_localctx, 34, RULE_arrayIndexAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			ident();
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 263;
				Match(T__4);
				State = 264;
				arrayAccess();
				State = 265;
				Match(T__5);
				}
				}
				State = 271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(Modula2Parser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Modula2Parser.IDENTIFIER, i);
		}
		public IdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ident; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentContext ident() {
		IdentContext _localctx = new IdentContext(Context, State);
		EnterRule(_localctx, 36, RULE_ident);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 272;
				Match(IDENTIFIER);
				}
				}
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 38, RULE_type);
		try {
			State = 281;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__30:
				EnterOuterAlt(_localctx, 1);
				{
				State = 277;
				Match(T__30);
				}
				break;
			case T__31:
				EnterOuterAlt(_localctx, 2);
				{
				State = 278;
				Match(T__31);
				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 3);
				{
				State = 279;
				Match(T__32);
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 4);
				{
				State = 280;
				array();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 40, RULE_array);
		try {
			State = 291;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 283;
				Match(T__33);
				State = 284;
				Match(T__34);
				State = 285;
				type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 286;
				Match(T__33);
				State = 287;
				expression();
				State = 288;
				Match(T__34);
				State = 289;
				type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		public RealNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterRealNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitRealNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealNumberContext realNumber() {
		RealNumberContext _localctx = new RealNumberContext(Context, State);
		EnterRule(_localctx, 42, RULE_realNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			number();
			State = 294;
			Match(T__20);
			State = 295;
			number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT() { return GetToken(Modula2Parser.DIGIT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 44, RULE_number);
		int _la;
		try {
			State = 303;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__28:
				EnterOuterAlt(_localctx, 1);
				{
				State = 297;
				Match(T__28);
				}
				break;
			case T__29:
				EnterOuterAlt(_localctx, 2);
				{
				State = 298;
				Match(T__29);
				}
				break;
			case T__35:
			case T__36:
			case DIGIT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__35 || _la==T__36) {
					{
					State = 299;
					_la = TokenStream.LA(1);
					if ( !(_la==T__35 || _la==T__36) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 302;
				Match(DIGIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOpContext : ParserRuleContext {
		public AddOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterAddOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitAddOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOpContext addOp() {
		AddOpContext _localctx = new AddOpContext(Context, State);
		EnterRule(_localctx, 46, RULE_addOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			_la = TokenStream.LA(1);
			if ( !(_la==T__35 || _la==T__36) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultOpContext : ParserRuleContext {
		public MultOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterMultOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitMultOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOpContext multOp() {
		MultOpContext _localctx = new MultOpContext(Context, State);
		EnterRule(_localctx, 48, RULE_multOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			_la = TokenStream.LA(1);
			if ( !(_la==T__37 || _la==T__38) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterContext : ParserRuleContext {
		public CharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterCharacter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitCharacter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterContext character() {
		CharacterContext _localctx = new CharacterContext(Context, State);
		EnterRule(_localctx, 50, RULE_character);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			Match(T__39);
			State = 313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 34084860461054L) != 0)) {
				{
				{
				State = 310;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==T__39) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 316;
			Match(T__39);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IModula2Listener typedListener = listener as IModula2Listener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IModula2Visitor<TResult> typedVisitor = visitor as IModula2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 52, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			Match(T__40);
			State = 322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32985348833278L) != 0)) {
				{
				{
				State = 319;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==T__40) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 325;
			Match(T__40);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,44,328,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,1,0,1,0,1,0,4,0,58,8,
		0,11,0,12,0,59,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,3,1,70,8,1,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,3,2,79,8,2,3,2,81,8,2,1,3,1,3,1,3,1,3,1,3,5,3,88,8,3,10,
		3,12,3,91,9,3,1,3,1,3,1,3,3,3,96,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,5,4,107,8,4,10,4,12,4,110,9,4,1,4,1,4,3,4,114,8,4,1,4,1,4,1,5,1,5,1,
		5,4,5,121,8,5,11,5,12,5,122,1,6,1,6,1,6,4,6,128,8,6,11,6,12,6,129,1,7,
		1,7,1,7,4,7,135,8,7,11,7,12,7,136,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,
		147,8,8,1,8,1,8,1,8,1,8,4,8,153,8,8,11,8,12,8,154,1,8,1,8,1,9,1,9,1,9,
		1,9,1,9,1,9,5,9,165,8,9,10,9,12,9,168,9,9,1,9,1,9,3,9,172,8,9,1,9,1,9,
		3,9,176,8,9,1,9,1,9,1,9,1,9,1,9,4,9,183,8,9,11,9,12,9,184,1,9,1,9,1,9,
		1,9,3,9,191,8,9,1,9,1,9,1,9,1,10,1,10,1,10,5,10,199,8,10,10,10,12,10,202,
		9,10,1,10,1,10,1,10,1,10,1,10,5,10,209,8,10,10,10,12,10,212,9,10,3,10,
		214,8,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,3,
		12,228,8,12,1,13,1,13,1,13,1,13,5,13,234,8,13,10,13,12,13,237,9,13,1,14,
		1,14,1,14,1,14,5,14,243,8,14,10,14,12,14,246,9,14,1,15,1,15,1,15,1,15,
		1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,259,8,15,1,16,1,16,1,17,1,17,1,
		17,1,17,1,17,5,17,268,8,17,10,17,12,17,271,9,17,1,18,4,18,274,8,18,11,
		18,12,18,275,1,19,1,19,1,19,1,19,3,19,282,8,19,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,3,20,292,8,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,3,22,301,
		8,22,1,22,3,22,304,8,22,1,23,1,23,1,24,1,24,1,25,1,25,5,25,312,8,25,10,
		25,12,25,315,9,25,1,25,1,25,1,26,1,26,5,26,321,8,26,10,26,12,26,324,9,
		26,1,26,1,26,1,26,0,0,27,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
		34,36,38,40,42,44,46,48,50,52,0,6,1,0,23,28,1,0,29,30,1,0,36,37,1,0,38,
		39,1,0,40,40,1,0,41,41,347,0,57,1,0,0,0,2,69,1,0,0,0,4,71,1,0,0,0,6,82,
		1,0,0,0,8,97,1,0,0,0,10,120,1,0,0,0,12,127,1,0,0,0,14,134,1,0,0,0,16,138,
		1,0,0,0,18,158,1,0,0,0,20,200,1,0,0,0,22,217,1,0,0,0,24,227,1,0,0,0,26,
		229,1,0,0,0,28,238,1,0,0,0,30,258,1,0,0,0,32,260,1,0,0,0,34,262,1,0,0,
		0,36,273,1,0,0,0,38,281,1,0,0,0,40,291,1,0,0,0,42,293,1,0,0,0,44,303,1,
		0,0,0,46,305,1,0,0,0,48,307,1,0,0,0,50,309,1,0,0,0,52,318,1,0,0,0,54,55,
		3,2,1,0,55,56,5,1,0,0,56,58,1,0,0,0,57,54,1,0,0,0,58,59,1,0,0,0,59,57,
		1,0,0,0,59,60,1,0,0,0,60,61,1,0,0,0,61,62,5,0,0,1,62,1,1,0,0,0,63,70,3,
		4,2,0,64,70,3,6,3,0,65,70,3,8,4,0,66,70,3,16,8,0,67,70,3,18,9,0,68,70,
		3,20,10,0,69,63,1,0,0,0,69,64,1,0,0,0,69,65,1,0,0,0,69,66,1,0,0,0,69,67,
		1,0,0,0,69,68,1,0,0,0,70,3,1,0,0,0,71,72,5,2,0,0,72,73,3,36,18,0,73,74,
		5,3,0,0,74,80,3,38,19,0,75,78,5,4,0,0,76,79,3,26,13,0,77,79,3,20,10,0,
		78,76,1,0,0,0,78,77,1,0,0,0,79,81,1,0,0,0,80,75,1,0,0,0,80,81,1,0,0,0,
		81,5,1,0,0,0,82,89,3,36,18,0,83,84,5,5,0,0,84,85,3,32,16,0,85,86,5,6,0,
		0,86,88,1,0,0,0,87,83,1,0,0,0,88,91,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,
		0,90,92,1,0,0,0,91,89,1,0,0,0,92,95,5,4,0,0,93,96,3,26,13,0,94,96,3,20,
		10,0,95,93,1,0,0,0,95,94,1,0,0,0,96,7,1,0,0,0,97,98,5,7,0,0,98,99,3,24,
		12,0,99,100,5,8,0,0,100,108,3,10,5,0,101,102,5,9,0,0,102,103,3,24,12,0,
		103,104,5,8,0,0,104,105,3,12,6,0,105,107,1,0,0,0,106,101,1,0,0,0,107,110,
		1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,113,1,0,0,0,110,108,1,0,0,
		0,111,112,5,10,0,0,112,114,3,14,7,0,113,111,1,0,0,0,113,114,1,0,0,0,114,
		115,1,0,0,0,115,116,5,11,0,0,116,9,1,0,0,0,117,118,3,2,1,0,118,119,5,1,
		0,0,119,121,1,0,0,0,120,117,1,0,0,0,121,122,1,0,0,0,122,120,1,0,0,0,122,
		123,1,0,0,0,123,11,1,0,0,0,124,125,3,2,1,0,125,126,5,1,0,0,126,128,1,0,
		0,0,127,124,1,0,0,0,128,129,1,0,0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,
		13,1,0,0,0,131,132,3,2,1,0,132,133,5,1,0,0,133,135,1,0,0,0,134,131,1,0,
		0,0,135,136,1,0,0,0,136,134,1,0,0,0,136,137,1,0,0,0,137,15,1,0,0,0,138,
		139,5,12,0,0,139,140,3,36,18,0,140,141,5,4,0,0,141,142,3,26,13,0,142,143,
		5,13,0,0,143,146,3,26,13,0,144,145,5,14,0,0,145,147,3,26,13,0,146,144,
		1,0,0,0,146,147,1,0,0,0,147,148,1,0,0,0,148,152,5,15,0,0,149,150,3,2,1,
		0,150,151,5,1,0,0,151,153,1,0,0,0,152,149,1,0,0,0,153,154,1,0,0,0,154,
		152,1,0,0,0,154,155,1,0,0,0,155,156,1,0,0,0,156,157,5,11,0,0,157,17,1,
		0,0,0,158,159,5,16,0,0,159,171,3,36,18,0,160,161,5,17,0,0,161,166,3,22,
		11,0,162,163,5,1,0,0,163,165,3,22,11,0,164,162,1,0,0,0,165,168,1,0,0,0,
		166,164,1,0,0,0,166,167,1,0,0,0,167,169,1,0,0,0,168,166,1,0,0,0,169,170,
		5,18,0,0,170,172,1,0,0,0,171,160,1,0,0,0,171,172,1,0,0,0,172,175,1,0,0,
		0,173,174,5,3,0,0,174,176,3,38,19,0,175,173,1,0,0,0,175,176,1,0,0,0,176,
		177,1,0,0,0,177,178,5,1,0,0,178,182,5,19,0,0,179,180,3,2,1,0,180,181,5,
		1,0,0,181,183,1,0,0,0,182,179,1,0,0,0,183,184,1,0,0,0,184,182,1,0,0,0,
		184,185,1,0,0,0,185,190,1,0,0,0,186,187,5,20,0,0,187,188,3,26,13,0,188,
		189,5,1,0,0,189,191,1,0,0,0,190,186,1,0,0,0,190,191,1,0,0,0,191,192,1,
		0,0,0,192,193,5,11,0,0,193,194,3,36,18,0,194,19,1,0,0,0,195,196,3,36,18,
		0,196,197,5,21,0,0,197,199,1,0,0,0,198,195,1,0,0,0,199,202,1,0,0,0,200,
		198,1,0,0,0,200,201,1,0,0,0,201,203,1,0,0,0,202,200,1,0,0,0,203,204,3,
		36,18,0,204,213,5,17,0,0,205,210,3,26,13,0,206,207,5,22,0,0,207,209,3,
		26,13,0,208,206,1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,
		0,211,214,1,0,0,0,212,210,1,0,0,0,213,205,1,0,0,0,213,214,1,0,0,0,214,
		215,1,0,0,0,215,216,5,18,0,0,216,21,1,0,0,0,217,218,3,36,18,0,218,219,
		5,3,0,0,219,220,3,38,19,0,220,23,1,0,0,0,221,222,3,26,13,0,222,223,7,0,
		0,0,223,224,3,26,13,0,224,228,1,0,0,0,225,228,3,36,18,0,226,228,7,1,0,
		0,227,221,1,0,0,0,227,225,1,0,0,0,227,226,1,0,0,0,228,25,1,0,0,0,229,235,
		3,28,14,0,230,231,3,46,23,0,231,232,3,28,14,0,232,234,1,0,0,0,233,230,
		1,0,0,0,234,237,1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,27,1,0,0,0,
		237,235,1,0,0,0,238,244,3,30,15,0,239,240,3,48,24,0,240,241,3,30,15,0,
		241,243,1,0,0,0,242,239,1,0,0,0,243,246,1,0,0,0,244,242,1,0,0,0,244,245,
		1,0,0,0,245,29,1,0,0,0,246,244,1,0,0,0,247,259,3,20,10,0,248,259,3,52,
		26,0,249,259,3,50,25,0,250,259,3,42,21,0,251,259,3,44,22,0,252,259,3,36,
		18,0,253,254,5,17,0,0,254,255,3,26,13,0,255,256,5,18,0,0,256,259,1,0,0,
		0,257,259,3,34,17,0,258,247,1,0,0,0,258,248,1,0,0,0,258,249,1,0,0,0,258,
		250,1,0,0,0,258,251,1,0,0,0,258,252,1,0,0,0,258,253,1,0,0,0,258,257,1,
		0,0,0,259,31,1,0,0,0,260,261,3,26,13,0,261,33,1,0,0,0,262,269,3,36,18,
		0,263,264,5,5,0,0,264,265,3,32,16,0,265,266,5,6,0,0,266,268,1,0,0,0,267,
		263,1,0,0,0,268,271,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,35,1,0,
		0,0,271,269,1,0,0,0,272,274,5,42,0,0,273,272,1,0,0,0,274,275,1,0,0,0,275,
		273,1,0,0,0,275,276,1,0,0,0,276,37,1,0,0,0,277,282,5,31,0,0,278,282,5,
		32,0,0,279,282,5,33,0,0,280,282,3,40,20,0,281,277,1,0,0,0,281,278,1,0,
		0,0,281,279,1,0,0,0,281,280,1,0,0,0,282,39,1,0,0,0,283,284,5,34,0,0,284,
		285,5,35,0,0,285,292,3,38,19,0,286,287,5,34,0,0,287,288,3,26,13,0,288,
		289,5,35,0,0,289,290,3,38,19,0,290,292,1,0,0,0,291,283,1,0,0,0,291,286,
		1,0,0,0,292,41,1,0,0,0,293,294,3,44,22,0,294,295,5,21,0,0,295,296,3,44,
		22,0,296,43,1,0,0,0,297,304,5,29,0,0,298,304,5,30,0,0,299,301,7,2,0,0,
		300,299,1,0,0,0,300,301,1,0,0,0,301,302,1,0,0,0,302,304,5,43,0,0,303,297,
		1,0,0,0,303,298,1,0,0,0,303,300,1,0,0,0,304,45,1,0,0,0,305,306,7,2,0,0,
		306,47,1,0,0,0,307,308,7,3,0,0,308,49,1,0,0,0,309,313,5,40,0,0,310,312,
		8,4,0,0,311,310,1,0,0,0,312,315,1,0,0,0,313,311,1,0,0,0,313,314,1,0,0,
		0,314,316,1,0,0,0,315,313,1,0,0,0,316,317,5,40,0,0,317,51,1,0,0,0,318,
		322,5,41,0,0,319,321,8,5,0,0,320,319,1,0,0,0,321,324,1,0,0,0,322,320,1,
		0,0,0,322,323,1,0,0,0,323,325,1,0,0,0,324,322,1,0,0,0,325,326,5,41,0,0,
		326,53,1,0,0,0,33,59,69,78,80,89,95,108,113,122,129,136,146,154,166,171,
		175,184,190,200,210,213,227,235,244,258,269,275,281,291,300,303,313,322
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
